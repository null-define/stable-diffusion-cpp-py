from typing import ClassVar

class rng_type_t:
    __members__: ClassVar[dict] = ...  # read-only
    CUDA_RNG: ClassVar[rng_type_t] = ...
    STD_DEFAULT_RNG: ClassVar[rng_type_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class sample_method_t:
    __members__: ClassVar[dict] = ...  # read-only
    DPM2: ClassVar[sample_method_t] = ...
    DPMPP2M: ClassVar[sample_method_t] = ...
    DPMPP2Mv2: ClassVar[sample_method_t] = ...
    DPMPP2S_A: ClassVar[sample_method_t] = ...
    EULER: ClassVar[sample_method_t] = ...
    EULER_A: ClassVar[sample_method_t] = ...
    HEUN: ClassVar[sample_method_t] = ...
    LCM: ClassVar[sample_method_t] = ...
    N_SAMPLE_METHODS: ClassVar[sample_method_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class schedule_t:
    __members__: ClassVar[dict] = ...  # read-only
    DEFAULT: ClassVar[schedule_t] = ...
    DISCRETE: ClassVar[schedule_t] = ...
    KARRAS: ClassVar[schedule_t] = ...
    N_SCHEDULES: ClassVar[schedule_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class sd_image_t:
    def __init__(self, *args, **kwargs) -> None: ...
    def __buffer__(self, *args, **kwargs): ...
    def __release_buffer__(self, *args, **kwargs): ...

class sd_log_level_t:
    __members__: ClassVar[dict] = ...  # read-only
    SD_LOG_DEBUG: ClassVar[sd_log_level_t] = ...
    SD_LOG_ERROR: ClassVar[sd_log_level_t] = ...
    SD_LOG_INFO: ClassVar[sd_log_level_t] = ...
    SD_LOG_WARN: ClassVar[sd_log_level_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class sd_type_t:
    __members__: ClassVar[dict] = ...  # read-only
    SD_TYPE_COUNT: ClassVar[sd_type_t] = ...
    SD_TYPE_F16: ClassVar[sd_type_t] = ...
    SD_TYPE_F32: ClassVar[sd_type_t] = ...
    SD_TYPE_I16: ClassVar[sd_type_t] = ...
    SD_TYPE_I32: ClassVar[sd_type_t] = ...
    SD_TYPE_I8: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ1_S: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ2_S: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ2_XS: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ2_XXS: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ3_S: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ3_XXS: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ4_NL: ClassVar[sd_type_t] = ...
    SD_TYPE_IQ4_XS: ClassVar[sd_type_t] = ...
    SD_TYPE_Q2_K: ClassVar[sd_type_t] = ...
    SD_TYPE_Q3_K: ClassVar[sd_type_t] = ...
    SD_TYPE_Q4_0: ClassVar[sd_type_t] = ...
    SD_TYPE_Q4_1: ClassVar[sd_type_t] = ...
    SD_TYPE_Q4_K: ClassVar[sd_type_t] = ...
    SD_TYPE_Q5_0: ClassVar[sd_type_t] = ...
    SD_TYPE_Q5_1: ClassVar[sd_type_t] = ...
    SD_TYPE_Q5_K: ClassVar[sd_type_t] = ...
    SD_TYPE_Q6_K: ClassVar[sd_type_t] = ...
    SD_TYPE_Q8_0: ClassVar[sd_type_t] = ...
    SD_TYPE_Q8_1: ClassVar[sd_type_t] = ...
    SD_TYPE_Q8_K: ClassVar[sd_type_t] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

def create_img(arg0: int, arg1: int, arg2: int, arg3: int) -> sd_image_t: ...
def free_sd_ctx(arg0: capsule) -> None: ...
def free_upscaler_ctx(arg0: capsule) -> None: ...
def new_sd_ctx(arg0: str, arg1: str, arg2: str, arg3: str, arg4: str, arg5: str, arg6: str, arg7: bool, arg8: bool, arg9: bool, arg10: int, arg11: sd_type_t, arg12: rng_type_t, arg13: schedule_t, arg14: bool, arg15: bool, arg16: bool) -> capsule: ...
def new_upscaler_ctx(arg0: str, arg1: int, arg2: sd_type_t) -> capsule: ...
def set_log_level(arg0: sd_log_level_t) -> None: ...
def txt2img(arg0: capsule, arg1: str, arg2: str, arg3: int, arg4: float, arg5: int, arg6: int, arg7: sample_method_t, arg8: int, arg9: int, arg10: int, arg11: sd_image_t, arg12: float, arg13: float, arg14: bool, arg15: str) -> sd_image_t: ...
def upscale(arg0: capsule, arg1: sd_image_t, arg2: int) -> sd_image_t: ...
